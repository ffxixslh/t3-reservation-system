// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hospital {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  admins         HospitalAdmin[] @relation("HospitalToAdmin")
  patients       User[]          @relation("HospitalToPatient")
  doctors        Doctor[]        @relation("HospitalToDoctor")
  departments    Department[]    @relation("HospitalToDepartment")
  appointments   Appointment[]   @relation("HospitalToAppointment")
  medicalRecords MedicalRecord[] @relation("HospitalToMedicalRecord")
}

model HospitalAdmin {
  hospitalId String @map("hospital_id")
  userId     String @unique @map("user_id")

  hospital Hospital @relation("HospitalToAdmin", fields: [hospitalId], references: [id])
  user     User     @relation("AdminToUser", fields: [userId], references: [id])

  @@unique([hospitalId, userId])
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String?  @unique
  password  String
  phone     String
  role      UserRole @default(PATIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  hospital      Hospital       @relation("HospitalToPatient", fields: [hospitalId], references: [id])
  hospitalId    String
  hospitalAdmin HospitalAdmin? @relation("AdminToUser")

  appointments   Appointment[]
  medicalRecords MedicalRecord[]

  @@map("users")
}

enum UserRole {
  PATIENT
  DOCTOR
  ADMIN
}

model Doctor {
  id           String      @id @default(cuid())
  name         String
  department   Department  @relation("DepartmentToDoctor", fields: [departmentId], references: [id])
  departmentId Int
  level        DoctorLevel
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  hospital   Hospital @relation("HospitalToDoctor", fields: [hospitalId], references: [id])
  hospitalId String

  appointments  Appointment[]
  medicalRecord MedicalRecord[]

  @@map("doctors")
}

enum DoctorLevel {
  MAIN
  VICE
  CHIEF
}

model Department {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  doctors    Doctor[] @relation("DepartmentToDoctor")
  hospital   Hospital @relation("HospitalToDepartment", fields: [hospitalId], references: [id])
  hospitalId String

  @@map("departments")
}

model Appointment {
  id        String            @id @default(cuid())
  status    AppointmentStatus
  time      DateTime
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  patient   User   @relation(fields: [patientId], references: [id])
  patientId String

  doctor   Doctor @relation(fields: [doctorId], references: [id])
  doctorId String

  hospital   Hospital @relation("HospitalToAppointment", fields: [hospitalId], references: [id])
  hospitalId String

  @@map("appointments")
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELED
}

model Text {
  id String @id @default(cuid())

  title         String
  content       String
  medicalRecord MedicalRecord[]

  @@map("texts")
}

model MedicalRecord {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patient   User   @relation(fields: [patientId], references: [id])
  patientId String

  doctor   Doctor @relation(fields: [doctorId], references: [id])
  doctorId String

  text   Text   @relation(fields: [textId], references: [id]) // 病历内容
  textId String

  hospital   Hospital @relation("HospitalToMedicalRecord", fields: [hospitalId], references: [id])
  hospitalId String

  @@map("medical_records")
}

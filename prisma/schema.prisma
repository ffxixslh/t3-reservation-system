// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String?  @unique
  password  String
  phone     String
  role      UserRole @default(PATIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  Appointment   Appointment[]
  MedicalRecord MedicalRecord[]

  @@map("users")
}

enum UserRole {
  PATIENT
  DOCTOR
  ADMIN
}

model Doctor {
  id        String      @id @default(cuid())
  name      String
  dept      Department  @relation(fields: [deptId], references: [id])
  deptId    Int
  level     DoctorLevel
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())

  appointments  Appointment[]
  MedicalRecord MedicalRecord[]

  @@map("doctors")
}

enum DoctorLevel {
  MAIN
  VICE
  CHIEF
}

model Department {
  id   Int     @id @default(autoincrement())
  name String
  desc String?

  doctors Doctor[]

  @@map("departments")
}

model Appointment {
  id String @id @default(cuid())

  patient   User   @relation(fields: [patientId], references: [id])
  patientId String

  doctor   Doctor @relation(fields: [doctorId], references: [id])
  doctorId String

  time   DateTime
  status AppointmentStatus

  @@map("appointments")
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELED
}

model Text {
  id String @id @default(cuid())

  title         String
  content       String
  MedicalRecord MedicalRecord[]

  @@map("texts")
}

model MedicalRecord {
  id String @id @default(cuid())

  patient   User   @relation(fields: [patientId], references: [id])
  patientId String

  doctor   Doctor @relation(fields: [doctorId], references: [id])
  doctorId String

  record Text   @relation(fields: [textId], references: [id]) // 病历内容
  textId String

  @@map("medical_records")
}
